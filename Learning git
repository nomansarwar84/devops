Learning Git

git config --global --list
git config --global user.name "nomansarwar84"
git config --global user.email noman.maju@gmail.com
git config --global --list
user.name=nomansarwar84
user.email=noman.maju@gmail.com
git config --global core.editor vim
git config --list --global

Config of the repository
In the background system created a directory and initialized git repo. Let's list the content.

cd test && ls -al

There is a .git directory, which is a hidden one (. on the beginning). This directory is created during git init operation.

What is inside?

ls -al .git

So, what is what? Let's explain the important files /directories.

hooks directory contains all custom hooks. These are small (usually) scripts which have to be executed before commit, or after, before push, etc.

branches - this is deprecated. Don't think about it anymore.

HEAD - pointer to the current branch and its latest commit.

config - configuration file for the repository.

info - the place where you stage the files using git add.

refs - the current state of the whole repo.

objects - commits, trees and blobs are stored here. May be very big.

logs - quite self explanatory.

description - description of the repository.

Ok, so, what we have in config file?

cat .git/config

For now it doesn't contains much. But when you start to work with branches, remote, etc, more lines will appear there.

Let's come back to our configuration.

Maybe we will add some colors?

git config --global color.status auto

git config --global color.branch auto

git config --global color.interactive auto

git config --global color.diff auto

git config --global alias.adog "log --all --decorate --oneline --graph"

Explanation. A dog is very popular way to remember the most useful set of parameters for git log.

git config --list

We have a file to commit in the repo. We can do it now, as we configured our user.

git add .

git commit testfile-01 -m "create testfile-01"

And now it is time to execute our alias.

git adog

These are only simple example. You can go crazy here.

Lesson 3: Commiting the first files

1. Local init of the repository
Initialize the repository
If you start work on the new repository locally (what means repo wasn't cloned earlier), you need to initialize the repository and build all internal structure needed to work with version control. In the nutshell, it will create the .git directory and all content inside (this will be part of another scenario)

Step 1
Create a directory

mkdir test-repo

and navigate there

cd test-repo

The directory is obviously empty

ls -al

Now it is time to initialize repository

git init

Now you should be able to execute status command

git status

And also the .git directory

ls -al

Lesson 3: Commiting the first files
2. Check status of the repository
Commit first file
We are already in proper directory, and git was initialized. Now it is the time to create first file.

touch newfile && echo hello > newfile

Let's check, if git sees the file

git status

In the output you should see that our new file is untracked.

Lesson 3: Commiting the first files
3. Add files
add file to staging area
It is the time to inform git, that we wish to stage our changes. to do so, execute command

git add newfile

this command added the file to the stage area, what can be seen after

git status

You see that the file is tracked and ready to be commited.

It is important to know, if you stage the file once, you don't need to repeat this action again during the work.

5. Add and commit multiple files in one shot
Add and commit multiple files
Scenario created some files for you. What was created?

two directories
one file in root directory of our repo
one file in directory
please notice, one directory is empty
tree

So, how our git status looks?

git status

What we have here?

First, we see one file is ready to be staged. One directory also.

But where are the missing pieces?

file inside the directory is not visibe, as the directory itself is not tracked yet. But Git is aware, that this directory is not empty, therefore we see it as ready to be added.

Second directory is empty, Git knows that, and it decides that adding the directory at this moment is not needed.

Lets add all files in one simple command. Last time we added specific file with git add command. This time we will use

git add .

Let's check

git status

Please, notice the difference. Now, your file is listed as listed to be commited. Empty directory is ommited.

Please be aware of one thing. git add . will add all files from your current directory and subdirectories, not from repository's root. If you are in subdirectory, only files from this path will be added.

Now we are ready to commit.

git commit -m "my second commit"

Let's check

git status

You succesfully commited multiple files!
